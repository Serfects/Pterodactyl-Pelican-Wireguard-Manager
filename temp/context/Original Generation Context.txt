Okay, here is the prompt i used to generate the structure for the script with ChatGPT:

Okay, now I want to start with adding the port management feature to the main menu. This entire next feature i will explain in this message will be added as a separate module file that will be incorporated into the main module file since it will be a very big feature that deserves its own separate file. The purpose of this feature is to add ports forwarding (port traffic from outside world into the wireguard server vps are tunneled into and out of the client) to the wireguard config after they have been generated. This feature should first ask the user which config they would like to add or remove or modify ports on by checking the /etc/wireguard directory for configs that are currently in there (not the configs in the backup folders or anywhere else in the /etc/wireguard directory). Once a config is selected, the script should let the user know that it is going to generate the default port forwarding template within the config, giving the user a last chance to back out if they dont want to. Once the user says yes, the script is going to generate a new template that will be used by the script later. The template is going to have two categories, "Games" and "Services". Different games and services will be listed under these categories, and they will be refered to as subsections. So each game or service added under their respective category is considered a subsection of that category. The script will ask the user whether they want to add delete or modify ports within the games or services category. Once the user selects either games or services the script will then list all of the games or services subsections under the respective category, depending on the what the user selected before. If there are no games or services subsections under the category, the script will say no games or no services respectively and then move onto the next step. After listing the games or services subsections, the script will ask the user to select a game or service they would like to modify. Once the user selects a game or service, the script will ask the user if they would like to add a new port, edit an existing port, delete a port, or delete the entire subsection. Whether the user selects adding, editing, or deleting, the script will display all the ports listed under the subsection and their attached comments, with each port having a number assigned to it for easy selection with the next options, then move on to displaying the options for the action the user requested (adding editing or deleting). If adding a port, the script will be generating iptables postup/postdown rules for forwarding the port from the wireguard server vps to the client, so the services hosted on the client can be accessed and used by using the ipaddress and port of the VPS itself. For example, if the client is hosting a service that requires port 667, the script will be generating rules for forwarding traffic inbound to the wireguard server vps on port 667, forwarding and tunneling port 667 to the wireguard client machine, so the service that is hosted on the client machine can be accessed using the ip address and port of the wireguard vps server. The rules should essentially make sure that the outside traffic or outside requests from outside users is forwarded to the client machine through the wireguard tunnel, and that the client machine and the services hosted on it are still able to see the real ip address and real information of the outside user so the service can properly do whatever it wants for the user or whatever the user wants to do with the service, and then the traffic will be routed back out of the client machine through the tunnel back out of the wireguard VPS ensuring the entire time that the outside user is able to interact with the service with no problems, but the outside user will never be able to see the ip address of the client machine, and will only ever be interacting with the ip address of the wireguard vps server. This will be the same concept and general rules to follow for every port added to the config whether it is a service or game. The rules added for port forwarding should always use the previously autodetected public ip address of wireguard server vps where it makes sense to insert it in the rule, and should also always use the client ip address that matches the [peer] allowedips x.x.x.x/32 at the bottom of the config. So, if the user is adding a port, the script will ask the user whether the port will be tcp, udp, or both (the script should then automatically know to change the rule to match tcp, udp or both together at the same time. If both, each protocol should have its own line of rules). Then after the user selects TCP UDP or both TCP and UDP, the script will ask the user what port number they would like to add, or what range or port numbers they would like to add, or a combination of both. The user should be able to do a combination of both all in the same answer by typing their answer as (for example) 667, 669, 671-673, 675. If the user answered like this, then ports 667, 669, 671, 672, 673, and 675 should be added. If a range of ports are added, each port should have its own line with attached rules in the config. After entering the ports, the script will ask the user if they would like to add a comment to go along with the port or ports that explains what the port is being added for, and this comment will be written into the config. This is not mandatory for the user to do if they do not want to add a comment, and should be able to skip this option if they want to. If the user is adding multiple ports at the same time like with the example above, the comment will be the same for each of the added ports. This will be the end of the adding a port section, and at the end of this the user should be looped back to the start of the menu of the selected subsection they just added a port to, so they can have the options displayed to them again if they want to add a port edit a port or delete a port. If the user is editing a port, the script should relist all the ports under that subsection with attached numbers for easier selection again, and ask the user to select a port to edit. The user will then be asked if they would like to edit the protocol (tcp or udp) or if they would like to change the port number. If changing the protocol, the user should be able to select either tcp or udp. If changing the port, the user should enter the new port number. Then the script should change the thing they asked to change in the config for them. This will be the end of the editing a port section, and at the end of this the user should be looped back to the start of the menu of the selected subsection they just added a port to, so they can have the options displayed to them again if they want to add a port edit a port or delete a port. If the user selects to delete a port, the script will again display all the ports under the subsection with attached numbers for easier selection. The user will then select the attached number of the port they would like to delete, and then be asked a conformation if they are sure they want to delete that port, and then if the user says yes the port should be deleted from the config file. This will be the end of the deleting a port section, and at the end of this the user should be looped back to the start of the menu of the selected subsection they just added a port to, so they can have the options displayed to them again if they want to add a port edit a port or delete a port. When it comes to adding deleting or editing the ports, I would like for the ports that the user is adding or deleting or editing to automatically be allowed or disallowed from the firewall once the port is added or deleted using the script. If a port is being edited, the script should automatically remove the old port number that was edited away, and add the new port number that the user entered after editing. when a port is added or deleted or edited, the protocol of that port should also be added or deleted or edited from the firewall. Please tell me how you intend to add all of these features what all the features you add will actually do and why you are making the choices you will make to add them in as much detail and explanation as you can, and then i will tell you to proceed with making the changes.